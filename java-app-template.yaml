apiVersion: v1
kind: Template
metadata:
  name: java-app-template
  annotations:
    openshift.io/display-name: Java Application
    iconClass: fa fa-code
objects:
- apiVersion: v1
  kind: BuildConfig
  metadata:
    annotations:
      pipeline.alpha.openshift.io/uses: '[{"name": "${PARAM_APP_NAME}", "namespace": "", "kind": "DeploymentConfig"}]'
    labels:
      app: ${PARAM_APP_NAME}
    name: ${PARAM_APP_NAME}-pipeline
  spec:
    selector:
      deploymentConfig: ${PARAM_APP_NAME}
    strategy:
      jenkinsPipelineStrategy:
        env:
        - name: GIT_REPO
          value: ${PARAM_GIT_REPO}
        - name: GIT_BRANCH
          value: ${PARAM_GIT_BRANCH}
        - name: APP_NAME
          value: ${PARAM_APP_NAME} 
        jenkinsfile: |-
            pipeline {
                agent {
                    label "maven"
                }
                options { 
                    skipDefaultCheckout()
                    disableConcurrentBuilds()
                }
                stages {
                    stage("Initialize") {
                        steps {
                            script {
                                // Gets the application project
                                env.PROJECT = env.JOB_NAME.split("/")[0]                                
                            }
                        }
                    }
                    stage("Checkout") {
                        steps {
                            git(url: env.GIT_REPO, branch: env.GIT_BRANCH)
                        }
                    }
                    stage("Compile") {
                        steps {
                            sh "mvn package -DskipTests"
                        }
                    }
                    stage("Test") {
                        steps {
                            sh "mvn test"
                        }
                    }
                    stage("Build Image") {
                        steps {
                            script {
                                openshift.withCluster() {
                                    openshift.withProject(env.PROJECT) {
                                        if (!openshift.selector("bc", "${APP_NAME}").exists()) {
                                            openshift.newBuild("--image-stream=redhat-openjdk18-openshift:1.2", "--name=${APP_NAME}", "--binary=true");                   
                                        }

                                        // Starts a new build and waits for its completion
                                        openshift.selector("bc", env.APP_NAME).startBuild("--from-dir=./target", "--wait=true");
                                    }
                                }
                            }
                        }
                    }
                    stage("Tag Image") {
                        steps {
                            script {
                                openshift.withCluster() {
                                    openshift.withProject(env.PROJECT) {
                                        env.TAG = readMavenPom().getVersion()
                                        openshift.tag("${APP_NAME}:latest", "${APP_NAME}:${TAG}")
                                    }
                                }
                            }
                        }
                    }
                    stage("Deploy Application") {
                        steps {
                            script {
                                openshift.withCluster() {
                                    openshift.withProject(env.PROJECT) {
                                        if (!openshift.selector("dc", env.APP_NAME).exists()) {
                                            openshift.newApp("${APP_NAME}:${TAG}")
                                            openshift.selector("svc", env.APP_NAME).expose()               
                                        } else {
                                            openshift.set("triggers", "dc/${APP_NAME}", "--remove-all")
                                            openshift.set("triggers", "dc/${APP_NAME}", "--from-image=${APP_NAME}:${TAG}", "-c ${APP_NAME}")
                                        }   

                                        def dc = openshift.selector("dc", env.APP_NAME)
                                        def latestDeploymentVersion = openshift.selector("dc", env.APP_NAME).object().status.latestVersion
                                        def rc = openshift.selector("rc", "${APP_NAME}-${latestDeploymentVersion}")
                
                                        rc.untilEach(1) {
                                            def rcMap = it.object()

                                            return (rcMap.status.replicas.equals(rcMap.status.readyReplicas))                                   
                                        }
                                    }
                                }
                            }       
                        }
                    }
                }
            }
      type: JenkinsPipeline
    triggers:
      - generic:
          allowEnv: true
          secret: ${PARAM_WEBHOOK_SECRET}
        type: Generic
parameters:
- description: The application name
  displayName: Application Name
  name: PARAM_APP_NAME
  required: true
- description: The application Git repository
  displayName: Git Repository
  name: PARAM_GIT_REPO
  required: true
- description: The application Git branch for development
  displayName: Git Branch
  name: PARAM_GIT_BRANCH
  value: master
  required: true
- description: The Git secret name to use when cloning ("none" if is not necessary)
  displayName: Git Secret
  name: PARAM_GIT_SECRET
  value: none
  required: true
- description: A secret string used to configure the webhook
  displayName: Webhook Secret
  name: PARAM_WEBHOOK_SECRET
  generate: expression 
  from: "[a-zA-Z0-9]{40}"
